<!-- ************************ -->
<!-- Continuation parameters  -->
<!-- ************************ -->

<ParameterList name="Continuation parameters">
  
  <!-- Define the initial, minimum and maximum continuation step size -->
  <Parameter name="initial step size" type="double" value="1.0e-3"/>
  <Parameter name="minimum step size" type="double" value="1.0e-8"/>
  <Parameter name="maximum step size" type="double" value="1.0"/>

  <!-- Give up at minimum step size -->
  <Parameter name="give up at minimum step size" type="bool" value="true"/>

  <Parameter name="increase step size" type="double" value="1.5"/>
  <Parameter name="decrease step size" type="double" value="2.0"/>
  
  <!-- Define the destination value for the continuation parameter -->
  <Parameter name="destination 0" type="double" value="1.0"/>
  
  <!-- Define the number of continuation steps               -->
  <!--   set to -1 to run until final destination is reached -->
  <Parameter name="maximum number of steps" type="int" value="-1"/>

  <!-- Tolerance in Newton process -->
  <Parameter name="Newton tolerance" type="double" value="1.0e-5"/>

  <!-- Tolerance when converging on destination         -->
  <!--  for both Newton and secant process in detect()  -->
  <Parameter name="destination tolerance" type="double" value="1.0e-5"/>
  
  <!-- Define the optimal interval for the amount of Newton iterations -->
  <Parameter name="minimum desired Newton iterations" type="int" value="3"/>
  <Parameter name="maximum desired Newton iterations" type="int" value="4"/>
  
  <!-- Upper bound for the Newton iterations, beyond this we restart -->
  <Parameter name="maximum Newton iterations" type="int" value="15"/>

  <!-- Backtracking is disabled by default, I prefer resetting -->
  <Parameter name="enable backtracking" type="bool" value="true"/>
  
  <!-- Set the number of backtracking steps -->
  <Parameter name="backtracking steps" type="int" value="5"/>
  <Parameter name="backtracking increase" type="double" value="1.2"/>

  <!-- Print failed residuals etc. -->
  <Parameter name="print important vectors" type="bool" value="true"/>

  <!-- compute stability: 'N' never,                    -->
  <!--                    'E' at the end of a run,      -->
  <!--                    'P' at every converged point. -->
  <Parameter name="compute stability" type="char" value="E" />

  <!-- *******************************************************  -->
  <!-- The following parameters are experimental                -->
  <!-- *******************************************************  -->

  <!-- Finite difference with which dFdpar is calculated -->
  <Parameter name="epsilon increment" type="double" value="1.0e-6"/>

  <!-- Normalization strategy                                -->
  <!--     O: Old (ds)                                       -->
  <!--     N: New (ds*ds)                                    -->
  <Parameter name="normalize strategy" type="char" value="N"/>

  <!-- corrector residual test types:           -->
  <!-- R:  ||R||_2                              -->
  <!-- D:  ||(pardir, xdir)||_inf     (default) -->
  <Parameter name="corrector residual test" type="char" value="R"/>

  <!-- Scaling of the state tangent, which can be made several orders      -->
  <!-- smaller than the parameter tangent.                                 -->
  <!-- I believe this affects the algorithms capability to traverse folds. -->
  <Parameter name="state tangent scaling" type="double" value="1.0"/>

  <!-- This is only possible when dFdpar is approximately constant -->
  <!-- for example during a continuation in Solar Forcing          -->
  <Parameter name="enable Newton Chord hybrid solve" type="bool" value="false"/>

  <!-- If predicted rhs is larger than this value we reject the prediction. -->
  <Parameter name="predictor bound" type="double" value="1e3"/>

  <!-- Type of the tangent that is calculated during the continuation -->
  <!--     E: Euler                                                   -->
  <!--     S: Secant                                                  -->
  <Parameter name="tangent type" type="char" value="S"/>

  <!-- Type of the initial tangent                           -->
  <!--     E: Euler                                          -->
  <!--     A: Assign                                         -->
  <Parameter name="initial tangent type" type="char" value="E"/>
  
</ParameterList>
